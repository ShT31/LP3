#include <bits/stdc++.h>
using namespace std;

struct HuffmanNode {
    char data;                  
    int frequency;              
    HuffmanNode *left, *right; 

    HuffmanNode(char data, int frequency) {
        left = right = nullptr;
        this->data = data;
        this->frequency = frequency;
    }
};

// Comparator struct to order nodes in the priority queue by frequency
struct Compare {
    bool operator()(HuffmanNode* left, HuffmanNode* right) {
        return left->frequency > right->frequency;
    }
};

// Recursive function to print the Huffman codes by traversing the tree
void printCodes(HuffmanNode* root, string code, unordered_map<char, string>& huffmanCodes) {
    if (!root) return;

    // If leaf node, store the character's code in the map and print it
    if (!root->left && !root->right) {
        huffmanCodes[root->data] = code;
        cout << root->data << ": " << code << endl;
    }

    // Traverse the left subtree (add "0" to the code for left path)
    printCodes(root->left, code + "0", huffmanCodes);

    // Traverse the right subtree (add "1" to the code for right path)
    printCodes(root->right, code + "1", huffmanCodes);
}

// Function to build the Huffman tree and print Huffman codes
void buildHuffmanTree(const string& text) {
    // Step 1: Count frequency of each character in the input text
    unordered_map<char, int> frequencyMap;
    for (char ch : text) {
        frequencyMap[ch]++;
    }

    // Step 2: Create a priority queue (min-heap) to store nodes based on frequency
    priority_queue<HuffmanNode*, vector<HuffmanNode*>, Compare> pq;

    // Step 3: Create a leaf node for each character and add to the priority queue
    for (auto pair : frequencyMap) {
        pq.push(new HuffmanNode(pair.first, pair.second));
    }

    // Step 4: Build the Huffman tree by combining nodes until one root node remains
    while (pq.size() > 1) {
        HuffmanNode* left = pq.top();
        pq.pop();
        HuffmanNode* right = pq.top();
        pq.pop();

        HuffmanNode* newNode = new HuffmanNode('\0', left->frequency + right->frequency);

        newNode->left = left; 
        newNode->right = right; 

        pq.push(newNode);
    }

    HuffmanNode* root = pq.top();

    // Step 5: Traverse the Huffman tree and store the codes in a map
    unordered_map<char, string> huffmanCodes;
    printCodes(root, "", huffmanCodes);

    cout << "\nEncoded string: ";
    for (char ch : text) {
        cout << huffmanCodes[ch];
    }
    cout << endl;
}

int main() {
    string text;
    cout << "Enter text to encode using Huffman Encoding: ";
    getline(cin, text);

    buildHuffmanTree(text);

    return 0;
}
